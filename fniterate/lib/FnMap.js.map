{"version":3,"file":"FnMap.js","sourceRoot":"","sources":["../src/FnMap.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,KAAY,SAAQ,GAAS;IACtC,MAAM,CAAC,IAAI,CAAO,MAAwB;QACtC,OAAO,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC;IAED,QAAQ,CAAC,GAAM,EAAE,YAAuC;QACpD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAChB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;SAC/C;QACD,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAEzB,CAAC;IAED,MAAM,CAAC,GAAM;QACT,MAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC9B,MAAM,OAAO,GAAG,MAAM,KAAK,SAAS,CAAC;QACrC,OAAO,CAAC,OAAO,EAAE,MAAO,CAAU,CAAC;IACvC,CAAC;IAED,MAAM,CAAC,GAAM,EAAE,KAAQ;QACnB,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAChB,OAAO,KAAK,CAAC;SAChB;QACD,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACtB,OAAO,IAAI,CAAC;IAChB,CAAC;IACD,SAAS,CAAC,GAAM,EAAE,KAAQ;QACtB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACjB,OAAO,KAAK,CAAC;SAChB;QACD,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACtB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,GAAG,CAAC,GAAM,EAAE,KAAQ;QAChB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE;YAC1B,MAAM,IAAI,UAAU,CAAC,6BAA6B,CAAC,CAAC;SACvD;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IACD,MAAM,CAAC,GAAM,EAAE,KAAQ;QACnB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE;YAC7B,MAAM,IAAI,UAAU,CAAC,6BAA6B,CAAC,CAAC;SACvD;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["export class FnMap<K, V> extends Map<K, V> {\n    static from<K, V>(source: Iterable<[K, V]>) {\n        return new FnMap(source);\n    }\n\n    getOrSet(key: K, valueFactory: (this: this, key: K) => V): V | undefined {\n        if (!this.has(key)) {\n            this.set(key, valueFactory.call(this, key));\n        }\n        return this.get(key);\n\n    }\n\n    tryGet(key: K): readonly [boolean, V] {\n        const result = super.get(key);\n        const success = result !== undefined;\n        return [success, result!] as const;\n    }\n\n    tryAdd(key: K, value: V): boolean {\n        if (super.has(key)) {\n            return false;\n        }\n        super.set(key, value);\n        return true;\n    }\n    tryUpdate(key: K, value: V): boolean {\n        if (!super.has(key)) {\n            return false;\n        }\n        super.set(key, value);\n        return true;\n    }\n\n    add(key: K, value: V) {\n        if (!this.tryAdd(key, value)) {\n            throw new RangeError('Key already exists in FnMap');\n        }\n        return this;\n    }\n    update(key: K, value: V) {\n        if (!this.tryUpdate(key, value)) {\n            throw new RangeError('Key already exists in FnMap');\n        }\n        return this;\n    }\n}\n"]}